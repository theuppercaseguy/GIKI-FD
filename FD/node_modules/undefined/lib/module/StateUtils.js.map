{"version":3,"names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","_objectSpread","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","arguments","undefined","nextIndex","nextState","reset","Array","isArray","compare","ii","every"],"sources":["StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"],"mappings":"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"}