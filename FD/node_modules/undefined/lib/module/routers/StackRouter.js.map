{"version":3,"names":["NavigationActions","StackActions","createConfigGetter","getScreenForRouteName","StateUtils","validateRouteConfigMap","invariant","generateKey","createPathParser","behavesLikePushAction","action","type","NAVIGATE","PUSH","defaultActionCreators","isResetToRootStack","RESET","key","routeConfigs","stackConfig","arguments","length","undefined","childRouters","routeNames","Object","keys","forEach","routeName","routeConfig","screen","router","initialRouteParams","getCustomActionCreators","initialRouteName","initialChildRouter","getInitialState","route","childRouter","childState","childAction","init","params","getStateForAction","isTransitioning","index","routes","_objectSpread","navigate","initialRouteKey","getParamsForRouteAndAction","_createPathParser","getPathAndParamsForRoute","getActionForPathAndParams","getComponentForState","state","activeChildRoute","getComponentForRouteName","getActionCreators","navStateKey","pop","n","popToTop","push","replace","replaceWith","newKey","reset","actions","dismiss","back","activeChildRouter","replaceAt","SET_PARAMS","_iterator","slice","reverse","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","value","childRoute","nextRouteState","newState","replaceAndPrune","immediate","lastRouteIndex","findIndex","r","childRouterNames","i","childRouterName","initChildRoute","navigatedChildRoute","routeToPush","POP_TO_TOP","REPLACE","routeIndex","COMPLETE_TRANSITION","toChildKey","lastRoute","find","indexOf","newStackActions","map","newStackAction","BACK","POP","backRouteIndex","Math","max","backRoute","keyIndex","preserveFocus","includes","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"sources":["StackRouter.js"],"sourcesContent":["import * as NavigationActions from '../NavigationActions';\nimport * as StackActions from './StackActions';\nimport createConfigGetter from './createConfigGetter';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport StateUtils from '../StateUtils';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport invariant from '../utils/invariant';\nimport { generateKey } from './KeyGenerator';\nimport { createPathParser } from './pathUtils';\n\nfunction behavesLikePushAction(action) {\n  return (\n    action.type === NavigationActions.NAVIGATE ||\n    action.type === StackActions.PUSH\n  );\n}\n\nconst defaultActionCreators = () => ({});\n\nfunction isResetToRootStack(action) {\n  return action.type === StackActions.RESET && action.key === null;\n}\n\nexport default (routeConfigs, stackConfig = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const childRouters = {};\n  const routeNames = Object.keys(routeConfigs);\n\n  // Loop through routes and find child routers\n  routeNames.forEach(routeName => {\n    // We're not using `getScreenForRouteName` here to preserve the lazy loading\n    // behaviour of routes. This means that routes with child routers must be\n    // defined using a component directly or with an object with a screen prop.\n    const routeConfig = routeConfigs[routeName];\n    const screen =\n      routeConfig && routeConfig.screen ? routeConfig.screen : routeConfig;\n    if (screen && screen.router) {\n      // If it has a router it's a navigator.\n      childRouters[routeName] = screen.router;\n    } else {\n      // If it doesn't have router it's an ordinary React component.\n      childRouters[routeName] = null;\n    }\n  });\n\n  const { initialRouteParams } = stackConfig;\n  const getCustomActionCreators =\n    stackConfig.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteName = stackConfig.initialRouteName || routeNames[0];\n\n  const initialChildRouter = childRouters[initialRouteName];\n\n  function getInitialState(action) {\n    let route = {};\n    const childRouter = childRouters[action.routeName];\n\n    // This is a push-like action, and childRouter will be a router or null if we are responsible for this routeName\n    if (behavesLikePushAction(action) && childRouter !== undefined) {\n      let childState = {};\n      // The router is null for normal leaf routes\n      if (childRouter !== null) {\n        const childAction =\n          action.action || NavigationActions.init({ params: action.params });\n        childState = childRouter.getStateForAction(childAction);\n      }\n\n      return {\n        key: 'StackRouterRoot',\n        isTransitioning: false,\n        index: 0,\n        routes: [\n          {\n            params: action.params,\n            ...childState,\n            key: action.key || generateKey(),\n            routeName: action.routeName,\n          },\n        ],\n      };\n    }\n\n    if (initialChildRouter) {\n      route = initialChildRouter.getStateForAction(\n        NavigationActions.navigate({\n          routeName: initialRouteName,\n          params: initialRouteParams,\n        })\n      );\n    }\n    const params = (routeConfigs[initialRouteName].params ||\n      route.params ||\n      action.params ||\n      initialRouteParams) && {\n      ...(routeConfigs[initialRouteName].params || {}),\n      ...(route.params || {}),\n      ...(action.params || {}),\n      ...(initialRouteParams || {}),\n    };\n    const { initialRouteKey } = stackConfig;\n    route = {\n      ...route,\n      ...(params ? { params } : {}),\n      routeName: initialRouteName,\n      key: action.key || (initialRouteKey || generateKey()),\n    };\n    return {\n      key: 'StackRouterRoot',\n      isTransitioning: false,\n      index: 0,\n      routes: [route],\n    };\n  }\n\n  function getParamsForRouteAndAction(routeName, action) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...action.params };\n    } else {\n      return action.params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, stackConfig);\n\n  return {\n    childRouters,\n\n    getComponentForState(state) {\n      const activeChildRoute = state.routes[state.index];\n      const { routeName } = activeChildRoute;\n      if (childRouters[routeName]) {\n        return childRouters[routeName].getComponentForState(activeChildRoute);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getActionCreators(route, navStateKey) {\n      return {\n        ...getCustomActionCreators(route, navStateKey),\n        pop: (n, params) =>\n          StackActions.pop({\n            n,\n            ...params,\n          }),\n        popToTop: params => StackActions.popToTop(params),\n        push: (routeName, params, action) =>\n          StackActions.push({\n            routeName,\n            params,\n            action,\n          }),\n        replace: (replaceWith, params, action, newKey) => {\n          if (typeof replaceWith === 'string') {\n            return StackActions.replace({\n              routeName: replaceWith,\n              params,\n              action,\n              key: route.key,\n              newKey,\n            });\n          }\n          invariant(\n            typeof replaceWith === 'object',\n            'Must replaceWith an object or a string'\n          );\n          invariant(\n            params == null,\n            'Params must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            action == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          invariant(\n            newKey == null,\n            'Child action must not be provided to .replace() when specifying an object'\n          );\n          return StackActions.replace(replaceWith);\n        },\n        reset: (actions, index) =>\n          StackActions.reset({\n            actions,\n            index: index == null ? actions.length - 1 : index,\n            key: navStateKey,\n          }),\n        dismiss: () =>\n          NavigationActions.back({\n            key: navStateKey,\n          }),\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return getInitialState(action);\n      }\n\n      const activeChildRoute = state.routes[state.index];\n\n      if (\n        !isResetToRootStack(action) &&\n        action.type !== NavigationActions.NAVIGATE\n      ) {\n        // Let the active child router handle the action\n        const activeChildRouter = childRouters[activeChildRoute.routeName];\n        if (activeChildRouter) {\n          const route = activeChildRouter.getStateForAction(\n            action,\n            activeChildRoute\n          );\n          if (route !== null && route !== activeChildRoute) {\n            return StateUtils.replaceAt(\n              state,\n              activeChildRoute.key,\n              route,\n              // the following tells replaceAt to NOT change the index to this route for the setParam action, because people don't expect param-setting actions to switch the active route\n              action.type === NavigationActions.SET_PARAMS\n            );\n          }\n        }\n      } else if (action.type === NavigationActions.NAVIGATE) {\n        // Traverse routes from the top of the stack to the bottom, so the\n        // active route has the first opportunity, then the one before it, etc.\n\n        for (let childRoute of state.routes.slice().reverse()) {\n          let childRouter = childRouters[childRoute.routeName];\n          let childAction =\n            action.routeName === childRoute.routeName && action.action\n              ? action.action\n              : action;\n\n          if (childRouter) {\n            const nextRouteState = childRouter.getStateForAction(\n              childAction,\n              childRoute\n            );\n\n            if (nextRouteState === null || nextRouteState !== childRoute) {\n              const newState = StateUtils.replaceAndPrune(\n                state,\n                nextRouteState ? nextRouteState.key : childRoute.key,\n                nextRouteState ? nextRouteState : childRoute\n              );\n              return {\n                ...newState,\n                isTransitioning:\n                  state.index !== newState.index\n                    ? action.immediate !== true\n                    : state.isTransitioning,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle push and navigate actions. This must happen after the focused\n      // child router has had a chance to handle the action.\n      if (\n        behavesLikePushAction(action) &&\n        childRouters[action.routeName] !== undefined // undefined means it's not a childRouter or a screen\n      ) {\n        const childRouter = childRouters[action.routeName];\n        let route;\n\n        invariant(\n          action.type !== StackActions.PUSH || action.key == null,\n          'StackRouter does not support key on the push action'\n        );\n\n        // Before pushing a new route we first try to find one in the existing route stack\n        // More information on this: https://github.com/react-navigation/rfcs/blob/master/text/0004-less-pushy-navigate.md\n        const lastRouteIndex = state.routes.findIndex(r => {\n          if (action.key) {\n            return r.key === action.key;\n          } else {\n            return r.routeName === action.routeName;\n          }\n        });\n\n        // An instance of this route exists already and we're dealing with a navigate action\n        if (action.type !== StackActions.PUSH && lastRouteIndex !== -1) {\n          // If index is unchanged and params are not being set, leave state identity intact\n          if (state.index === lastRouteIndex && !action.params) {\n            return null;\n          }\n\n          // Remove the now unused routes at the tail of the routes array\n          const routes = state.routes.slice(0, lastRouteIndex + 1);\n\n          // Apply params if provided, otherwise leave route identity intact\n          if (action.params) {\n            const route = state.routes[lastRouteIndex];\n            routes[lastRouteIndex] = {\n              ...route,\n              params: {\n                ...route.params,\n                ...action.params,\n              },\n            };\n          }\n          // Return state with new index. Change isTransitioning only if index has changed\n          return {\n            ...state,\n            isTransitioning:\n              state.index !== lastRouteIndex\n                ? action.immediate !== true\n                : state.isTransitioning,\n            index: lastRouteIndex,\n            routes,\n          };\n        }\n\n        if (childRouter) {\n          // Delegate to the child router with the given action, or init it\n          const childAction =\n            action.action ||\n            NavigationActions.init({\n              params: getParamsForRouteAndAction(action.routeName, action),\n            });\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // note(brentvatne): does it make sense to wipe out the params\n            // here? or even to add params at all? need more info about what\n            // this solves\n            ...childRouter.getStateForAction(childAction),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        } else {\n          // Create the route from scratch\n          route = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            routeName: action.routeName,\n            key: action.key || generateKey(),\n          };\n        }\n        return {\n          ...StateUtils.push(state, route),\n          isTransitioning: action.immediate !== true,\n        };\n      } else if (\n        action.type === StackActions.PUSH &&\n        childRouters[action.routeName] === undefined\n      ) {\n        // Return the state identity to bubble the action up\n        return state;\n      }\n\n      // Handle navigation to other child routers that are not yet pushed\n      if (behavesLikePushAction(action)) {\n        const childRouterNames = Object.keys(childRouters);\n        for (let i = 0; i < childRouterNames.length; i++) {\n          const childRouterName = childRouterNames[i];\n          const childRouter = childRouters[childRouterName];\n          if (childRouter) {\n            // For each child router, start with a blank state\n            const initChildRoute = childRouter.getStateForAction(\n              NavigationActions.init()\n            );\n            // Then check to see if the router handles our navigate action\n            const navigatedChildRoute = childRouter.getStateForAction(\n              action,\n              initChildRoute\n            );\n            let routeToPush = null;\n            if (navigatedChildRoute === null) {\n              // Push the route if the router has 'handled' the action and returned null\n              routeToPush = initChildRoute;\n            } else if (navigatedChildRoute !== initChildRoute) {\n              // Push the route if the state has changed in response to this navigation\n              routeToPush = navigatedChildRoute;\n            }\n            if (routeToPush) {\n              const route = {\n                ...routeToPush,\n                routeName: childRouterName,\n                key: action.key || generateKey(),\n              };\n              return {\n                ...StateUtils.push(state, route),\n                isTransitioning: action.immediate !== true,\n              };\n            }\n          }\n        }\n      }\n\n      // Handle pop-to-top behavior. Make sure this happens after children have had a chance to handle the action, so that the inner stack pops to top first.\n      if (action.type === StackActions.POP_TO_TOP) {\n        // Refuse to handle pop to top if a key is given that doesn't correspond\n        // to this router\n        if (action.key && state.key !== action.key) {\n          return state;\n        }\n\n        // If we're already at the top, then we return the state with a new\n        // identity so that the action is handled by this router.\n        if (state.index > 0) {\n          return {\n            ...state,\n            isTransitioning: action.immediate !== true,\n            index: 0,\n            routes: [state.routes[0]],\n          };\n        }\n        return state;\n      }\n\n      // Handle replace action\n      if (action.type === StackActions.REPLACE) {\n        let routeIndex;\n\n        // If the key param is undefined, set the index to the last route in the stack\n        if (action.key === undefined && state.routes.length) {\n          routeIndex = state.routes.length - 1;\n        } else {\n          routeIndex = state.routes.findIndex(r => r.key === action.key);\n        }\n\n        // Only replace if the key matches one of our routes\n        if (routeIndex !== -1) {\n          const childRouter = childRouters[action.routeName];\n          let childState = {};\n          if (childRouter) {\n            const childAction =\n              action.action ||\n              NavigationActions.init({\n                params: getParamsForRouteAndAction(action.routeName, action),\n              });\n            childState = childRouter.getStateForAction(childAction);\n          }\n          const routes = [...state.routes];\n          routes[routeIndex] = {\n            params: getParamsForRouteAndAction(action.routeName, action),\n            // merge the child state in this order to allow params override\n            ...childState,\n            routeName: action.routeName,\n            key: action.newKey || generateKey(),\n          };\n          return { ...state, routes };\n        }\n      }\n\n      // Update transitioning state\n      if (\n        action.type === StackActions.COMPLETE_TRANSITION &&\n        (action.key == null || action.key === state.key) &&\n        action.toChildKey === state.routes[state.index].key &&\n        state.isTransitioning\n      ) {\n        return {\n          ...state,\n          isTransitioning: false,\n        };\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return {\n            ...state,\n            routes,\n          };\n        }\n      }\n\n      if (action.type === StackActions.RESET) {\n        // Only handle reset actions that are unspecified or match this state key\n        if (action.key != null && action.key != state.key) {\n          // Deliberately use != instead of !== so we can match null with\n          // undefined on either the state or the action\n          return state;\n        }\n        const newStackActions = action.actions;\n\n        return {\n          ...state,\n          routes: newStackActions.map(newStackAction => {\n            const router = childRouters[newStackAction.routeName];\n\n            let childState = {};\n\n            if (router) {\n              const childAction =\n                newStackAction.action ||\n                NavigationActions.init({\n                  params: getParamsForRouteAndAction(\n                    newStackAction.routeName,\n                    newStackAction\n                  ),\n                });\n\n              childState = router.getStateForAction(childAction);\n            }\n\n            return {\n              params: getParamsForRouteAndAction(\n                newStackAction.routeName,\n                newStackAction\n              ),\n              ...childState,\n              routeName: newStackAction.routeName,\n              key: newStackAction.key || generateKey(),\n            };\n          }),\n          index: action.index,\n        };\n      }\n\n      if (\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP\n      ) {\n        const { key, n, immediate } = action;\n        let backRouteIndex = state.index;\n        if (action.type === StackActions.POP && n != null) {\n          // determine the index to go back *from*. In this case, n=1 means to go\n          // back from state.index, as if it were a normal \"BACK\" action\n          backRouteIndex = Math.max(1, state.index - n + 1);\n        } else if (key) {\n          const backRoute = state.routes.find(route => route.key === key);\n          backRouteIndex = state.routes.indexOf(backRoute);\n        }\n\n        if (backRouteIndex > 0) {\n          return {\n            ...state,\n            routes: state.routes.slice(0, backRouteIndex),\n            index: backRouteIndex - 1,\n            isTransitioning: immediate !== true,\n          };\n        }\n      }\n\n      // By this point in the router's state handling logic, we have handled the behavior of the active route, and handled any stack actions.\n      // If we haven't returned by now, we should allow non-active child routers to handle this action, and switch to that index if the child state (route) does change..\n\n      const keyIndex = action.key ? StateUtils.indexOf(state, action.key) : -1;\n\n      // Traverse routes from the top of the stack to the bottom, so the\n      // active route has the first opportunity, then the one before it, etc.\n      for (let childRoute of state.routes.slice().reverse()) {\n        if (childRoute.key === activeChildRoute.key) {\n          // skip over the active child because we let it attempt to handle the action earlier\n          continue;\n        }\n        // If a key is provided and in routes state then let's use that\n        // knowledge to skip extra getStateForAction calls on other child\n        // routers\n        if (keyIndex >= 0 && childRoute.key !== action.key) {\n          continue;\n        }\n        let childRouter = childRouters[childRoute.routeName];\n        if (childRouter) {\n          const route = childRouter.getStateForAction(action, childRoute);\n\n          if (route === null) {\n            return state;\n          } else if (route && route !== childRoute) {\n            return StateUtils.replaceAt(\n              state,\n              childRoute.key,\n              route,\n              // People don't expect these actions to switch the active route\n              // TODO: We should switch to action.preserveFocus: true for drawer in future\n              action.preserveFocus || action.type.includes('DRAWER')\n            );\n          }\n        }\n      }\n\n      return state;\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      stackConfig.defaultNavigationOptions\n    ),\n  };\n};\n"],"mappings":"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"}