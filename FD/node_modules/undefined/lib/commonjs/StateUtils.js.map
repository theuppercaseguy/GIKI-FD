{"version":3,"names":["_invariant","_interopRequireDefault","require","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","invariant","slice","_objectSpread2","default","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","arguments","undefined","nextIndex","nextState","reset","Array","isArray","compare","ii","every","_default","exports"],"sources":["StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"],"mappings":"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"}