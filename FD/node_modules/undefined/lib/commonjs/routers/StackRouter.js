import _objectSpread from"@babel/runtime/helpers/objectSpread";import*as NavigationActions from'../NavigationActions';import*as StackActions from'./StackActions';import createConfigGetter from'./createConfigGetter';import getScreenForRouteName from'./getScreenForRouteName';import StateUtils from'../StateUtils';import validateRouteConfigMap from'./validateRouteConfigMap';import invariant from'../utils/invariant';import{generateKey}from'./KeyGenerator';import{createPathParser}from'./pathUtils';function behavesLikePushAction(action){return action.type===NavigationActions.NAVIGATE||action.type===StackActions.PUSH;}var defaultActionCreators=function defaultActionCreators(){return{};};function isResetToRootStack(action){return action.type===StackActions.RESET&&action.key===null;}export default(function(routeConfigs){var stackConfig=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};validateRouteConfigMap(routeConfigs);var childRouters={};var routeNames=Object.keys(routeConfigs);routeNames.forEach(function(routeName){var routeConfig=routeConfigs[routeName];var screen=routeConfig&&routeConfig.screen?routeConfig.screen:routeConfig;if(screen&&screen.router){childRouters[routeName]=screen.router;}else{childRouters[routeName]=null;}});var initialRouteParams=stackConfig.initialRouteParams;var getCustomActionCreators=stackConfig.getCustomActionCreators||defaultActionCreators;var initialRouteName=stackConfig.initialRouteName||routeNames[0];var initialChildRouter=childRouters[initialRouteName];function getInitialState(action){var route={};var childRouter=childRouters[action.routeName];if(behavesLikePushAction(action)&&childRouter!==undefined){var childState={};if(childRouter!==null){var childAction=action.action||NavigationActions.init({params:action.params});childState=childRouter.getStateForAction(childAction);}return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[_objectSpread({params:action.params},childState,{key:action.key||generateKey(),routeName:action.routeName})]};}if(initialChildRouter){route=initialChildRouter.getStateForAction(NavigationActions.navigate({routeName:initialRouteName,params:initialRouteParams}));}var params=(routeConfigs[initialRouteName].params||route.params||action.params||initialRouteParams)&&_objectSpread({},routeConfigs[initialRouteName].params||{},route.params||{},action.params||{},initialRouteParams||{});var initialRouteKey=stackConfig.initialRouteKey;route=_objectSpread({},route,params?{params:params}:{},{routeName:initialRouteName,key:action.key||initialRouteKey||generateKey()});return{key:'StackRouterRoot',isTransitioning:false,index:0,routes:[route]};}function getParamsForRouteAndAction(routeName,action){var routeConfig=routeConfigs[routeName];if(routeConfig&&routeConfig.params){return _objectSpread({},routeConfig.params,action.params);}else{return action.params;}}var _createPathParser=createPathParser(childRouters,routeConfigs,stackConfig),getPathAndParamsForRoute=_createPathParser.getPathAndParamsForRoute,getActionForPathAndParams=_createPathParser.getActionForPathAndParams;return{childRouters:childRouters,getComponentForState:function getComponentForState(state){var activeChildRoute=state.routes[state.index];var routeName=activeChildRoute.routeName;if(childRouters[routeName]){return childRouters[routeName].getComponentForState(activeChildRoute);}return getScreenForRouteName(routeConfigs,routeName);},getComponentForRouteName:function getComponentForRouteName(routeName){return getScreenForRouteName(routeConfigs,routeName);},getActionCreators:function getActionCreators(route,navStateKey){return _objectSpread({},getCustomActionCreators(route,navStateKey),{pop:function pop(n,params){return StackActions.pop(_objectSpread({n:n},params));},popToTop:function popToTop(params){return StackActions.popToTop(params);},push:function push(routeName,params,action){return StackActions.push({routeName:routeName,params:params,action:action});},replace:function replace(replaceWith,params,action,newKey){if(typeof replaceWith==='string'){return StackActions.replace({routeName:replaceWith,params:params,action:action,key:route.key,newKey:newKey});}invariant(typeof replaceWith==='object','Must replaceWith an object or a string');invariant(params==null,'Params must not be provided to .replace() when specifying an object');invariant(action==null,'Child action must not be provided to .replace() when specifying an object');invariant(newKey==null,'Child action must not be provided to .replace() when specifying an object');return StackActions.replace(replaceWith);},reset:function reset(actions,index){return StackActions.reset({actions:actions,index:index==null?actions.length-1:index,key:navStateKey});},dismiss:function dismiss(){return NavigationActions.back({key:navStateKey});}});},getStateForAction:function getStateForAction(action,state){if(!state){return getInitialState(action);}var activeChildRoute=state.routes[state.index];if(!isResetToRootStack(action)&&action.type!==NavigationActions.NAVIGATE){var activeChildRouter=childRouters[activeChildRoute.routeName];if(activeChildRouter){var route=activeChildRouter.getStateForAction(action,activeChildRoute);if(route!==null&&route!==activeChildRoute){return StateUtils.replaceAt(state,activeChildRoute.key,route,action.type===NavigationActions.SET_PARAMS);}}}else if(action.type===NavigationActions.NAVIGATE){for(var _iterator=state.routes.slice().reverse(),_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?Symbol.iterator:"@@iterator"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _childRoute=_ref;var childRouter=childRouters[_childRoute.routeName];var childAction=action.routeName===_childRoute.routeName&&action.action?action.action:action;if(childRouter){const nextRouteState=childRouter.getStateForAction(childAction,_childRoute);if(nextRouteState===null||nextRouteState!==_childRoute){const newState=StateUtils.replaceAndPrune(state,nextRouteState?nextRouteState.key:_childRoute.key,nextRouteState?nextRouteState:_childRoute);return{...newState,isTransitioning:state.index!==newState.index?action.immediate!==true:state.isTransitioning};}}}}if(behavesLikePushAction(action)&&childRouters[action.routeName]!==undefined){const childRouter=childRouters[action.routeName];let route;invariant(action.type!==StackActions.PUSH||action.key==null,'StackRouter does not support key on the push action');const lastRouteIndex=state.routes.findIndex(r=>{if(action.key){return r.key===action.key;}else{return r.routeName===action.routeName;}});if(action.type!==StackActions.PUSH&&lastRouteIndex!==-1){if(state.index===lastRouteIndex&&!action.params){return null;}const routes=state.routes.slice(0,lastRouteIndex+1);if(action.params){const route=state.routes[lastRouteIndex];routes[lastRouteIndex]={...route,params:{...route.params,...action.params}};}return{...state,isTransitioning:state.index!==lastRouteIndex?action.immediate!==true:state.isTransitioning,index:lastRouteIndex,routes};}if(childRouter){const childAction=action.action||NavigationActions.init({params:getParamsForRouteAndAction(action.routeName,action)});route={params:getParamsForRouteAndAction(action.routeName,action),...childRouter.getStateForAction(childAction),routeName:action.routeName,key:action.key||generateKey()};}else{route={params:getParamsForRouteAndAction(action.routeName,action),routeName:action.routeName,key:action.key||generateKey()};}return{...StateUtils.push(state,route),isTransitioning:action.immediate!==true};}else if(action.type===StackActions.PUSH&&childRouters[action.routeName]===undefined){return state;}if(behavesLikePushAction(action)){const childRouterNames=Object.keys(childRouters);for(let i=0;i<childRouterNames.length;i++){const childRouterName=childRouterNames[i];const childRouter=childRouters[childRouterName];if(childRouter){const initChildRoute=childRouter.getStateForAction(NavigationActions.init());const navigatedChildRoute=childRouter.getStateForAction(action,initChildRoute);let routeToPush=null;if(navigatedChildRoute===null){routeToPush=initChildRoute;}else if(navigatedChildRoute!==initChildRoute){routeToPush=navigatedChildRoute;}if(routeToPush){const route={...routeToPush,routeName:childRouterName,key:action.key||generateKey()};return{...StateUtils.push(state,route),isTransitioning:action.immediate!==true};}}}}if(action.type===StackActions.POP_TO_TOP){if(action.key&&state.key!==action.key){return state;}if(state.index>0){return{...state,isTransitioning:action.immediate!==true,index:0,routes:[state.routes[0]]};}return state;}if(action.type===StackActions.REPLACE){let routeIndex;if(action.key===undefined&&state.routes.length){routeIndex=state.routes.length-1;}else{routeIndex=state.routes.findIndex(r=>r.key===action.key);}if(routeIndex!==-1){const childRouter=childRouters[action.routeName];let childState={};if(childRouter){const childAction=action.action||NavigationActions.init({params:getParamsForRouteAndAction(action.routeName,action)});childState=childRouter.getStateForAction(childAction);}const routes=[...state.routes];routes[routeIndex]={params:getParamsForRouteAndAction(action.routeName,action),...childState,routeName:action.routeName,key:action.newKey||generateKey()};return{...state,routes};}}if(action.type===StackActions.COMPLETE_TRANSITION&&(action.key==null||action.key===state.key)&&action.toChildKey===state.routes[state.index].key&&state.isTransitioning){return{...state,isTransitioning:false};}if(action.type===NavigationActions.SET_PARAMS){const key=action.key;const lastRoute=state.routes.find(route=>route.key===key);if(lastRoute){const params={...lastRoute.params,...action.params};const routes=[...state.routes];routes[state.routes.indexOf(lastRoute)]={...lastRoute,params};return{...state,routes};}}if(action.type===StackActions.RESET){if(action.key!=null&&action.key!=state.key){return state;}const newStackActions=action.actions;return{...state,routes:newStackActions.map(newStackAction=>{const router=childRouters[newStackAction.routeName];let childState={};if(router){const childAction=newStackAction.action||NavigationActions.init({params:getParamsForRouteAndAction(newStackAction.routeName,newStackAction)});childState=router.getStateForAction(childAction);}return{params:getParamsForRouteAndAction(newStackAction.routeName,newStackAction),...childState,routeName:newStackAction.routeName,key:newStackAction.key||generateKey()};}),index:action.index};}if(action.type===NavigationActions.BACK||action.type===StackActions.POP){const{key,n,immediate}=action;let backRouteIndex=state.index;if(action.type===StackActions.POP&&n!=null){backRouteIndex=Math.max(1,state.index-n+1);}else if(key){const backRoute=state.routes.find(route=>route.key===key);backRouteIndex=state.routes.indexOf(backRoute);}if(backRouteIndex>0){return{...state,routes:state.routes.slice(0,backRouteIndex),index:backRouteIndex-1,isTransitioning:immediate!==true};}}var keyIndex=action.key?StateUtils.indexOf(state,action.key):-1;for(let childRoute of state.routes.slice().reverse()){if(childRoute.key===activeChildRoute.key){continue;}if(keyIndex>=0&&childRoute.key!==action.key){continue;}let childRouter=childRouters[childRoute.routeName];if(childRouter){const route=childRouter.getStateForAction(action,childRoute);if(route===null){return state;}else if(route&&route!==childRoute){return StateUtils.replaceAt(state,childRoute.key,route,action.preserveFocus||action.type.includes('DRAWER'));}}}return state;},getPathAndParamsForState(state){const route=state.routes[state.index];return getPathAndParamsForRoute(route);},getActionForPathAndParams(path,params){return getActionForPathAndParams(path,params);},getScreenOptions:createConfigGetter(routeConfigs,stackConfig.defaultNavigationOptions)};});
//# sourceMappingURL=StackRouter.js.map