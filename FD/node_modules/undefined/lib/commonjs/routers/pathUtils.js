import _objectSpread from"@babel/runtime/helpers/objectSpread";import pathToRegexp,{compile}from'path-to-regexp';import*as NavigationActions from'../NavigationActions';import invariant from'../utils/invariant';var queryString=require('query-string');export var getParamsFromPath=function getParamsFromPath(inputParams,pathMatch,pathMatchKeys){var params=pathMatch.slice(1).reduce(function(paramsOut,matchResult,i){var key=pathMatchKeys[i];if(!key||key.asterisk){return paramsOut;}var paramName=key.name;var decodedMatchResult;if(matchResult){try{decodedMatchResult=decodeURIComponent(matchResult);}catch(e){}}paramsOut[paramName]=decodedMatchResult||matchResult;return paramsOut;},_objectSpread({},inputParams));return params;};var getRestOfPath=function getRestOfPath(pathMatch,pathMatchKeys){var rest=pathMatch[pathMatchKeys.findIndex(function(k){return k.asterisk;})+1];return rest;};var determineDelimiter=function determineDelimiter(uri,uriPrefix){if(Array.isArray(uriPrefix)){if(uriPrefix.length===1)return uriPrefix[0];for(var _iterator=uriPrefix,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[typeof Symbol==="function"?Symbol.iterator:"@@iterator"]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++];}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value;}var _prefix=_ref;if(uri.startsWith(_prefix))return _prefix;}return null;}return uriPrefix;};export const urlToPathAndParams=(url,uriPrefix)=>{const searchMatch=url.match(/^(.*)\?(.*)$/);const[,urlWithoutQuery,query]=searchMatch||[null,url,{}];const params=queryString.parse(query);const delimiter=determineDelimiter(urlWithoutQuery,uriPrefix)||'://';let path=urlWithoutQuery.split(delimiter)[1];if(path===undefined){path=urlWithoutQuery;}if(path==='/'){path='';}if(path[path.length-1]==='/'){path=path.slice(0,-1);}return{path,params};};export const createPathParser=(childRouters,routeConfigs,{paths:pathConfigs={},disableRouteNamePaths})=>{const pathsByRouteNames={};let paths=[];Object.keys(childRouters).forEach(routeName=>{let pathPattern;if(pathConfigs[routeName]!==undefined){pathPattern=pathConfigs[routeName];}else{pathPattern=routeConfigs[routeName].path;}if(pathPattern===undefined){pathPattern=disableRouteNamePaths?null:routeName;}invariant(pathPattern===null||typeof pathPattern==='string',`Route path for ${routeName} must be specified as a string, or null.`);const isPathMatchable=pathPattern!==null;const exactReKeys=[];const exactRe=isPathMatchable?pathToRegexp(pathPattern,exactReKeys):null;const extendedPathReKeys=[];const isWildcard=pathPattern===''||!isPathMatchable;const extendedPathRe=pathToRegexp(isWildcard?'*':`${pathPattern}/*`,extendedPathReKeys);pathsByRouteNames[routeName]={exactRe,exactReKeys,extendedPathRe,extendedPathReKeys,isWildcard,toPath:pathPattern===null?()=>'':compile(pathPattern)};});paths=Object.entries(pathsByRouteNames);const getActionForPathAndParams=(pathToResolve='',inputParams={})=>{for(const[routeName,path]of paths){const{exactRe,exactReKeys,extendedPathRe,extendedPathReKeys}=path;const childRouter=childRouters[routeName];const exactMatch=exactRe&&exactRe.exec(pathToResolve);if(exactMatch&&exactMatch.length){const extendedMatch=extendedPathRe&&extendedPathRe.exec(pathToResolve);let childAction=null;if(extendedMatch&&childRouter){const restOfPath=getRestOfPath(extendedMatch,extendedPathReKeys);childAction=childRouter.getActionForPathAndParams(restOfPath,inputParams);}return NavigationActions.navigate({routeName,params:getParamsFromPath(inputParams,exactMatch,exactReKeys),action:childAction});}}for(const[routeName,path]of paths){const{extendedPathRe,extendedPathReKeys}=path;const childRouter=childRouters[routeName];const extendedMatch=extendedPathRe&&extendedPathRe.exec(pathToResolve);if(extendedMatch&&extendedMatch.length){const restOfPath=getRestOfPath(extendedMatch,extendedPathReKeys);let childAction=null;if(childRouter){childAction=childRouter.getActionForPathAndParams(restOfPath,inputParams);}if(!childAction){continue;}return NavigationActions.navigate({routeName,params:getParamsFromPath(inputParams,extendedMatch,extendedPathReKeys),action:childAction});}}return null;};const getPathAndParamsForRoute=route=>{const{routeName,params}=route;const childRouter=childRouters[routeName];const{toPath,exactReKeys}=pathsByRouteNames[routeName];const subPath=toPath(params);const nonPathParams={};if(params){Object.keys(params).filter(paramName=>!exactReKeys.find(k=>k.name===paramName)).forEach(paramName=>{nonPathParams[paramName]=params[paramName];});}if(childRouter){const child=childRouter.getPathAndParamsForState(route);return{path:subPath?`${subPath}/${child.path}`:child.path,params:child.params?{...nonPathParams,...child.params}:nonPathParams};}return{path:subPath,params:nonPathParams};};return{getActionForPathAndParams,getPathAndParamsForRoute};};
//# sourceMappingURL=pathUtils.js.map